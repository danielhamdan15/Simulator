#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>


#define ARRIVAL_EVENT 1
#define DEPARTURE_EVENT 2

typedef struct event {
    float time;
    int type;
    struct event* next;
} event;

typedef struct {
    float totalWaitTime;
    float totalServiceTime;
    int processCount;
    int processInQueue;
} simulation_stats;

simulation_stats stats = {0, 0, 0, 0};

event* event_head = NULL;
float current_time = 0.0;
float urand() {
    return (float)rand() / RAND_MAX;
}

float genexp(float lambda) {
    return -log(1 - urand()) / lambda;
}
void insert_event(event* new_event) {
    event** ptr = &event_head;
    while (*ptr && (*ptr)->time < new_event->time) {
        ptr = &(*ptr)->next;
    }
    new_event->next = *ptr;
    *ptr = new_event;
}

event* create_event(float time, int type) {
    event* ev = (event*)malloc(sizeof(event));
    ev->time = time;
    ev->type = type;
    ev->next = NULL;
    return ev;
}
void handle_arrival(float lambda, float mu) {
    current_time += genexp(lambda);
    insert_event(create_event(current_time + genexp(mu), DEPARTURE_EVENT));
    stats.processCount++;
    stats.processInQueue++;
}

void handle_departure() {
    stats.processInQueue--;
    stats.totalServiceTime += current_time;
}
void run_simulation(int max_processes, float lambda, float mu) {
    while (stats.processCount < max_processes) {
        event* ev = event_head;
        if (ev == NULL) break;

        current_time = ev->time;
        if (ev->type == ARRIVAL_EVENT) {
            handle_arrival(lambda, mu);
        } else if (ev->type == DEPARTURE_EVENT) {
            handle_departure();
        }

        event_head = ev->next;
        free(ev);
    }

    printf("Average Turnaround Time: %f\n", stats.totalServiceTime / stats.processCount);
    printf("Total Throughput: %f processes/unit time\n", (float)stats.processCount / current_time);
    printf("Average CPU Utilization: %f%%\n", (stats.totalServiceTime / current_time) * 100);
    printf("Average number of processes in Ready Queue: %f\n", (float)stats.totalWaitTime / current_time);
}

int main() {
    float lambda = 0.5;  // average arrival rate (processes per time unit)
    float mu = 0.5;     // average service rate (processes per time unit)
time_t now = time(NULL);
srand((unsigned int)time(NULL));

    insert_event(create_event(0, ARRIVAL_EVENT));  // kick-start the simulation

    run_simulation(10000, lambda, mu);

    return 0;
}
